/*
 * MORFEO Project
 * http://www.morfeo-project.org
 *
 * Component: TIDorbJTest
 * Programming Language: Java
 *
 * File: $Source: EchoServer.java $
 * Version: $Revision: 1.0 $
 * Date: $Date: 10-ago-2006 $
 * Last modified by: $Author: irenka.redondo $
 *
 * (C) Copyright 2004 Telefónica Investigación y Desarrollo
 *     S.A.Unipersonal (Telefónica I+D)
 *
 * Info about members and contributors of the MORFEO project
 * is available at:
 *
 *   http://www.morfeo-project.org/TIDorbJ/CREDITS
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * If you want to use this software an plan to distribute a
 * proprietary application in any way, and you are not licensing and
 * distributing your source code under GPL, you probably need to
 * purchase a commercial license of the product.  More info about
 * licensing options is available at:
 *
 *   http://www.morfeo-project.org/TIDorbJ/Licensing
 */

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.Properties;

import org.omg.CORBA.ORB;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAHelper;

public class EchoServer {
    public static void main(String[] args) {
        try {
            // Create and initialize orb
            org.omg.CORBA_2_5.ORB orb = 
                (org.omg.CORBA_2_5.ORB) ORB.init(args, System.getProperties());

            // Get rootPOA reference and activate POAManager
            POA rootPOA = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
            rootPOA.the_POAManager().activate();
			
            // Create servant
            MyEchoTestImpl servant = new MyEchoTestImpl(orb);
			
            // Activate servant
            byte[] servantId = rootPOA.activate_object(servant);

            // Get servant reference and write it to file
            org.omg.CORBA.Object obj = rootPOA.id_to_reference(servantId);
           String reference = orb.object_to_string(obj);
	        
            String dbior = "Test.ior";
            File ior_fl = new File(dbior);
            try {
                BufferedWriter bw = new BufferedWriter(new FileWriter(ior_fl));
                bw.write(reference, 0, reference.length());
                bw.flush();
                bw.close();
            } catch (java.io.IOException e) {
                System.err.println("Error writing file " + dbior);
                System.exit(0);
            }


            orb.register_initial_reference("Test", obj);

            // Start serving requests
            System.out.println("[Server] Running...");

            orb.run();
            //Thread.sleep(35000); // sleep 30 seconds
                            
            //Destroy orb
            System.out.println("[Server] Destroying ORB...");
            orb.destroy();
			
            System.exit(0);

        } catch (Exception e) {
            System.err.println("Main: Unexpected exception " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }
}
