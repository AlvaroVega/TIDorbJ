/* CORBA 2.6 MODULE */

#pragma prefix "omg.org"
  
module CORBA {
 
  local interface TypeCode;
  interface Contained;
  interface Repository;
  interface Container;
  interface ModuleDef;
  interface ConstantDef;
  interface IDLType;
  interface StructDef;
  interface UnionDef;
  interface EnumDef;
  interface AliasDef;
  interface InterfaceDef;
  interface ExceptionDef;
  interface NativeDef;
  typedef sequence <InterfaceDef> InterfaceDefSeq;
  interface ValueDef;
  typedef sequence <ValueDef> ValueDefSeq;
  interface ValueBoxDef;
  typedef sequence <Contained> ContainedSeq;

  typedef sequence<any> AnySeq;
  typedef sequence<boolean> BooleanSeq;
  typedef sequence<char> CharSeq;
  typedef sequence<wchar> WCharSeq;
  typedef sequence<octet> OctetSeq;
  typedef sequence<short> ShortSeq;
  typedef sequence<unsigned short> UShortSeq;  
  typedef sequence<long> LongSeq;
  typedef sequence<unsigned long> ULongSeq;
  typedef sequence<long long> LongLongSeq;
  typedef sequence<unsigned long long> ULongLongSeq;
  typedef sequence<float> FloatSeq;
  typedef sequence<double> DoubleSeq;
  typedef sequence<string> StringSeq;
  typedef sequence<wstring> WStringSeq;

  

  typedef string RepositoryId;
  typedef string ScopedName;
  typedef string Identifier;


  const unsigned long OMGVMCID = 1330446336;

  enum SetOverrideType {SET_OVERRIDE, ADD_OVERRIDE};
  
  native AbstractBase;
  native ValueFactory;


  local interface ORB { // PIDL
    typedef string ObjectId;
    typedef sequence <ObjectId> ObjectIdList;
    exception InvalidName {};
  };
  

  
  //////////////////////
  // Java Mapping     //
  //////////////////////
  
  typedef unsigned long Flags;
  
  const Flags ARG_IN = 1;
  const Flags ARG_OUT = 2;
  const Flags ARG_INOUT = 3;
  
  const Flags CTX_RESTRICT_SCOPE = 15;
  
  
  ////////////////////////
  // ServiceInformation //
  ////////////////////////
 
  typedef unsigned short ServiceType;
  typedef unsigned long ServiceOption;
  typedef unsigned long ServiceDetailType;
  
  const ServiceType Security = 1;
  
  struct ServiceDetail {
    ServiceDetailType service_detail_type;
    sequence <octet> service_detail;
  };

 
  struct ServiceInformation {
    sequence <ServiceOption> service_options;
    sequence <ServiceDetail> service_details;
  };

  /////////////////////////////////
  // Policy Basic IDL definition //
  /////////////////////////////////
  
  typedef unsigned long PolicyType;

  interface Policy {
    readonly attribute PolicyType policy_type;
    Policy copy();
    void destroy();
  };
  
  typedef sequence <Policy> PolicyList;
  typedef sequence <PolicyType> PolicyTypeSeq;

  exception InvalidPolicies { sequence <unsigned short> indices; };
  
  typedef short PolicyErrorCode;
  
  const PolicyErrorCode BAD_POLICY = 0;
  const PolicyErrorCode UNSUPPORTED_POLICY = 1;
  const PolicyErrorCode BAD_POLICY_TYPE = 2;
  const PolicyErrorCode BAD_POLICY_VALUE = 3;
  const PolicyErrorCode UNSUPPORTED_POLICY_VALUE = 4;
  
  exception PolicyError {PolicyErrorCode reason;};  

  
  ////////////////////////
  // DomainManager      //
  ////////////////////////

 
  interface DomainManager {
    Policy get_domain_policy (in PolicyType policy_type);
  };  

  const PolicyType SecConstruction = 11;

  interface ConstructionPolicy: Policy{
    void make_domain_manager(in InterfaceDef object_type,
                             in boolean constr_policy);

  };
  

  typedef sequence <DomainManager> DomainManagerList;  
  
  
  /////////////
  // Current //
  /////////////
  
  interface Current {
  };

  
  valuetype StringValue string;
  valuetype WStringValue wstring;

  
  
  ///////////////////////////
  // Interface Repository  //
  ///////////////////////////
  
  enum DefinitionKind {
    dk_none, dk_all, dk_Attribute, dk_Constant, dk_Exception, dk_Interface, 
    dk_Module, dk_Operation, dk_Typedef, dk_Alias, dk_Struct, dk_Union, dk_Enum,
    dk_Primitive, dk_String, dk_Sequence, dk_Array, dk_Repository, dk_Wstring, 
    dk_Fixed, dk_Value, dk_ValueBox, dk_ValueMember, dk_Native
  };
  
  interface IRObject {
    // read interface
    readonly attribute DefinitionKind def_kind;
    // write interface
    void destroy ();
  };
  
  typedef string VersionSpec;
   
  interface Contained : IRObject {
    // read/write interface
    attribute RepositoryId id;
    attribute Identifier name;
    attribute VersionSpec version;

    // read interface
    readonly attribute Container defined_in;
    readonly attribute ScopedName absolute_name;
    readonly attribute Repository containing_repository;
    
    struct Description {
      DefinitionKind kind;
      any value;
    };
    
    Description describe ();
    
    // write interface
    void move (
      in Container new_container,
      in Identifier new_name,
      in VersionSpec new_version
    );
  };
  
 
  struct StructMember {
    Identifier name;
    TypeCode type;
    IDLType type_def;
  };
  
  typedef sequence <StructMember> StructMemberSeq;
  
  struct Initializer {
    StructMemberSeq members;
    Identifier name;
  };
  
  typedef sequence <Initializer> InitializerSeq;
  
  struct UnionMember {
    Identifier name;
    any label;
    TypeCode type;
    IDLType type_def;
  };
  
  typedef sequence <UnionMember> UnionMemberSeq;
  typedef sequence <Identifier> EnumMemberSeq;
  
  interface Container : IRObject {
    // read interface
    Contained lookup (in ScopedName search_name);
    
    ContainedSeq contents (
      in DefinitionKind limit_type,
      in boolean exclude_inherited
    );
    
    ContainedSeq lookup_name (
      in Identifier search_name,
      in long levels_to_search,
      in DefinitionKind limit_type,
      in boolean exclude_inherited
    );
    
    struct Description {
      Contained contained_object;
      DefinitionKind kind;
      any value;
    };
    
    typedef sequence<Description> DescriptionSeq;
  
    DescriptionSeq describe_contents (
      in DefinitionKind limit_type,
      in boolean exclude_inherited,
      in long max_returned_objs
    );
    
    // write interface
    ModuleDef create_module (
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version
    );
    
    ConstantDef create_constant (
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in IDLType type,
      in any value
    );
    
    StructDef create_struct (
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in StructMemberSeq members
    );
    
    UnionDef create_union (
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in IDLType discriminator_type,
      in UnionMemberSeq members
    );
    
    EnumDef create_enum (
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in EnumMemberSeq members
    );
    
    AliasDef create_alias (
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in IDLType original_type
    );
    
    InterfaceDef create_interface (
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in InterfaceDefSeq base_interfaces,
      in boolean is_abstract
    );
    
    ValueDef create_value(
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in boolean is_custom,
      in boolean is_abstract,
      in ValueDef base_value,
      in boolean is_truncatable,
      in ValueDefSeq abstract_base_values,
      in InterfaceDefSeq supported_interfaces,
      in InitializerSeq initializers
    );
    
    ValueBoxDef create_value_box(
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in IDLType original_type_def
    );
    
    ExceptionDef create_exception(
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in StructMemberSeq members
    );
    
    NativeDef create_native(
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version
    );
  };
  
  interface IDLType : IRObject {
    readonly attribute TypeCode type;
  };
  
  interface PrimitiveDef;
  interface StringDef;
  interface SequenceDef;
  interface ArrayDef;
  interface WstringDef;
  interface FixedDef;
  
  enum PrimitiveKind {
    pk_null, pk_void, pk_short, pk_long, pk_ushort, pk_ulong,
    pk_float, pk_double, pk_boolean, pk_char, pk_octet,
    pk_any, pk_TypeCode, pk_Principal, pk_string, pk_objref,
    pk_longlong, pk_ulonglong, pk_longdouble,
    pk_wchar, pk_wstring, pk_value_base
  };
  
  interface Repository : Container {
    // read interface
    Contained lookup_id (in RepositoryId search_id);
    
    TypeCode get_canonical_typecode(in TypeCode tc);
    
    PrimitiveDef get_primitive (in PrimitiveKind kind);
    
    // write interface
    StringDef create_string (in unsigned long bound);
    
    WstringDef create_wstring (in unsigned long bound);
    
    SequenceDef create_sequence (
      in unsigned long bound,
      in IDLType element_type
    );
    
    ArrayDef create_array (
      in unsigned long length,
      in IDLType element_type
    );
    
    FixedDef create_fixed (
      in unsigned short digits,
      in short scale
    );
  };
  
  interface ModuleDef : Container, Contained {
  };
  
  struct ModuleDescription {
    Identifier name;
    RepositoryId id;
    RepositoryId defined_in;
    VersionSpec version;
  };
  
  interface ConstantDef : Contained {
    readonly attribute TypeCode type;
    attribute IDLType type_def;
    attribute any value;
  };
  
  struct ConstantDescription {
    Identifier name;
    RepositoryId id;
    RepositoryId defined_in;
    VersionSpec version;
    TypeCode type;
    any value;
  };
  
  interface TypedefDef : Contained, IDLType {
  };
  
  struct TypeDescription {
    Identifier name;
    RepositoryId id;
    RepositoryId defined_in;
    VersionSpec version;
    TypeCode type;
  };
  
  interface StructDef : TypedefDef, Container {
    attribute StructMemberSeq members;
  };
  
  interface UnionDef : TypedefDef, Container {
    readonly attribute TypeCode discriminator_type;
    attribute IDLType discriminator_type_def;
    attribute UnionMemberSeq members;
  };
  
  interface EnumDef : TypedefDef {
    attribute EnumMemberSeq members;
  };
  
  interface AliasDef : TypedefDef {
    attribute IDLType original_type_def;
  };
  
  interface NativeDef : TypedefDef {
  };
  
  interface PrimitiveDef: IDLType {
    readonly attribute PrimitiveKind kind;
  };
  
  interface StringDef : IDLType {
    attribute unsigned long bound;
  };
  
  interface WstringDef : IDLType {
    attribute unsigned long bound;
  };
  
  interface FixedDef : IDLType {
    attribute unsigned short digits;
    attribute short scale;
  };
  
  interface SequenceDef : IDLType {
    attribute unsigned long bound;
    readonly attribute TypeCode element_type;
    attribute IDLType element_type_def;
  };
  
  interface ArrayDef : IDLType {
    attribute unsigned long length;
    readonly attribute TypeCode element_type;
    attribute IDLType element_type_def;
  };
  
  interface ExceptionDef : Contained, Container {
    readonly attribute TypeCode type;
    attribute StructMemberSeq members;
  };
  
  struct ExceptionDescription {
    Identifier name;
    RepositoryId id;
    RepositoryId defined_in;
    VersionSpec version;
    TypeCode type;
  };
  
  enum AttributeMode {ATTR_NORMAL, ATTR_READONLY};
  
  interface AttributeDef : Contained {
    readonly attribute TypeCode type;
    attribute IDLType type_def;
    attribute AttributeMode mode;
  };
    
  struct AttributeDescription {
    Identifier name;
    RepositoryId id;
    RepositoryId defined_in;
    VersionSpec version;
    TypeCode type;
    AttributeMode mode;
  };
  
  enum OperationMode {OP_NORMAL, OP_ONEWAY};
  
  enum ParameterMode {PARAM_IN, PARAM_OUT, PARAM_INOUT};
  
  struct ParameterDescription {
    Identifier name;
    TypeCode type;
    IDLType type_def;
    ParameterMode mode;
  };
  
  typedef sequence <ParameterDescription> ParDescriptionSeq;
  typedef Identifier ContextIdentifier;
  typedef sequence <ContextIdentifier> ContextIdSeq;
  typedef sequence <ExceptionDef> ExceptionDefSeq;
  typedef sequence <ExceptionDescription> ExcDescriptionSeq;
  
  interface OperationDef : Contained {
    readonly attribute TypeCode result;
    attribute IDLType result_def;
    attribute ParDescriptionSeq params;
    attribute OperationMode mode;
    attribute ContextIdSeq contexts;
    attribute ExceptionDefSeq exceptions;
  };
  
  struct OperationDescription {
    Identifier name;
    RepositoryId id;
    RepositoryId defined_in;
    VersionSpec version;
    TypeCode result;
    OperationMode mode;
    ContextIdSeq contexts;
    ParDescriptionSeq parameters;
    ExcDescriptionSeq exceptions;
  };
  
  typedef sequence <RepositoryId> RepositoryIdSeq;
  typedef sequence <OperationDescription> OpDescriptionSeq;
  typedef sequence <AttributeDescription> AttrDescriptionSeq;
  
  interface InterfaceDef : Container, Contained, IDLType {
    // read/write interface
    attribute InterfaceDefSeq base_interfaces;
    attribute boolean is_abstract;
    
    // read interface
    boolean is_a (in RepositoryId interface_id);
    
    struct FullInterfaceDescription {
      Identifier name;
      RepositoryId id;
      RepositoryId defined_in;
      VersionSpec version;
      OpDescriptionSeq operations;
      AttrDescriptionSeq attributes;
      RepositoryIdSeq base_interfaces;
      TypeCode type;
      boolean is_abstract;
    };
    
    FullInterfaceDescription describe_interface();
    
    // write interface
    AttributeDef create_attribute (
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in IDLType type,
      in AttributeMode mode
    );
    
    OperationDef create_operation (
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in IDLType result,
      in OperationMode mode,
      in ParDescriptionSeq params,
      in ExceptionDefSeq exceptions,
      in ContextIdSeq contexts
    );
  };
  
  struct InterfaceDescription {
    Identifier name;
    RepositoryId id;
    RepositoryId defined_in;
    VersionSpec version;
    RepositoryIdSeq base_interfaces;
    boolean is_abstract;
  };
  
  typedef short Visibility;
  
  const Visibility PRIVATE_MEMBER = 0;
  const Visibility PUBLIC_MEMBER = 1;
  
  struct ValueMember {
    Identifier name;
    RepositoryId id;
    RepositoryId defined_in;
    VersionSpec version;
    TypeCode type;
    IDLType type_def;
    Visibility access;
  };
  
  typedef sequence <ValueMember> ValueMemberSeq;
  
  interface ValueMemberDef : Contained {
    readonly attribute TypeCode type;
    attribute IDLType type_def;
    attribute Visibility access;
  };
  
  interface ValueDef : Container, Contained, IDLType {
    // read/write interface
    attribute InterfaceDefSeq supported_interfaces;
    attribute InitializerSeq initializers;
    attribute ValueDef base_value;
    attribute ValueDefSeq abstract_base_values;
    attribute boolean is_abstract;
    attribute boolean is_custom;
    attribute boolean is_truncatable;
    
    // read interface
    boolean is_a(in RepositoryId id);
    
    struct FullValueDescription {
      Identifier name;
      RepositoryId id;
      boolean is_abstract;
      boolean is_custom;
      RepositoryId defined_in;
      VersionSpec version;
      OpDescriptionSeq operations;
      AttrDescriptionSeq attributes;
      ValueMemberSeq members;
      InitializerSeq initializers;
      RepositoryIdSeq supported_interfaces;
      RepositoryIdSeq abstract_base_values;
      boolean is_truncatable;
      RepositoryId base_value;
      TypeCode type;
    };
    
    FullValueDescription describe_value();
    
    ValueMemberDef create_value_member(
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in IDLType type,
      in Visibility access
    );
    
    AttributeDef create_attribute(
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in IDLType type,
      in AttributeMode mode
    );
    
    OperationDef create_operation (
      in RepositoryId id,
      in Identifier name,
      in VersionSpec version,
      in IDLType result,
      in OperationMode mode,
      in ParDescriptionSeq params,
      in ExceptionDefSeq exceptions,
      in ContextIdSeq contexts
    );
  };
  
  struct ValueDescription {
    Identifier name;
    RepositoryId id;
    boolean is_abstract;
    boolean is_custom;
    RepositoryId defined_in;
    VersionSpec version;
    RepositoryIdSeq supported_interfaces;
    RepositoryIdSeq abstract_base_values;
    boolean is_truncatable;
    RepositoryId base_value;
  };
  
  interface ValueBoxDef : TypedefDef {
    attribute IDLType original_type_def;
  };
  
  enum TCKind { //JAVA MAPPING PIDL
    tk_null, tk_void,
    tk_short, tk_long, tk_ushort, tk_ulong,
    tk_float, tk_double, tk_boolean, tk_char,
    tk_octet, tk_any, tk_TypeCode, tk_Principal, tk_objref,
    tk_struct, tk_union, tk_enum, tk_string,
    tk_sequence, tk_array, tk_alias, tk_except,
    tk_longlong, tk_ulonglong, tk_longdouble,
    tk_wchar, tk_wstring, tk_fixed,
    tk_value, tk_value_box,
    tk_native,
    tk_abstract_interface,
    tk_local_interface
  };  
  
  
  typedef short ValueModifier; // JAVA MAPPING PIDL
  
  const ValueModifier VM_NONE = 0;
  const ValueModifier VM_CUSTOM = 1;
  const ValueModifier VM_ABSTRACT = 2;
  const ValueModifier VM_TRUNCATABLE = 3;
  
  local interface TypeCode { // JAVA MAPPING PIDL  
    exception Bounds {};
    exception BadKind {};
    
    // for all TypeCode kinds  
    boolean equal (in TypeCode tc);
    boolean equivalent(in TypeCode tc);
    TypeCode get_compact_typecode();
    TCKind kind ();
    
    // for tk_objref, tk_struct, tk_union, tk_enum, tk_alias,
    // tk_value, tk_value_box, tk_native, tk_abstract_interface
    // and tk_except
    RepositoryId id () raises (BadKind);
    
    // for tk_objref, tk_struct, tk_union, tk_enum, tk_alias,
    // tk_value, tk_value_box, tk_native, tk_abstract_interface
    // and tk_except
    Identifier name () raises (BadKind);
    
    // for tk_struct, tk_union, tk_enum, tk_value,
    // and tk_except
    unsigned long member_count () raises (BadKind);
    Identifier member_name (in unsigned long index)
    raises (BadKind, Bounds);
    
    // for tk_struct, tk_union, tk_value, and tk_except
    TypeCode member_type (in unsigned long index)
    raises (BadKind, Bounds);
    
    // for tk_union
    any member_label (in unsigned long index)
    raises (BadKind, Bounds);
    TypeCode discriminator_type () raises (BadKind);
    long default_index () raises (BadKind);
    
    // for tk_string, tk_sequence, and tk_array
    unsigned long length () raises (BadKind);
    
    // for tk_sequence, tk_array, tk_value_box, and tk_alias
    TypeCode content_type () raises (BadKind);
    
    // for tk_fixed
    unsigned short fixed_digits() raises (BadKind);
    short fixed_scale() raises (BadKind);
    
    // for tk_value
    Visibility member_visibility(in unsigned long index)
    raises(BadKind, Bounds);
    ValueModifier type_modifier() raises(BadKind);
    TypeCode concrete_base_type() raises(BadKind);
  };

  exception BadFixedValue {
    unsigned long offset;
  };

  abstract valuetype DataOutputStream {
    void write_any(in any value);
    void write_boolean(in boolean value);
    void write_char(in char value);
    void write_wchar(in wchar value);
    void write_octet(in octet value);
    void write_short(in short value);
    void write_ushort(in unsigned short value);
    void write_long(in long value);
    void write_ulong(in unsigned long value);
    void write_longlong(in long long value);
    void write_ulonglong(in unsigned long long value);
    void write_float(in float value);
    void write_double(in double value);
//    void write_longdouble(in long double value);
    void write_string(in string value);
    void write_wstring(in wstring value);
    void write_Object(in Object value);
    void write_Abstract(in AbstractBase value);
    void write_Value(in ValueBase value);
    void write_TypeCode(in TypeCode value);
    void write_any_array(in AnySeq seq, in unsigned long offset, in unsigned long length);
    void write_boolean_array( in BooleanSeq seq, in unsigned long offset, in unsigned long length);
    void write_char_array(in CharSeq seq, in unsigned long offset, in unsigned long length);
    void write_wchar_array(in WCharSeq seq, in unsigned long offset, in unsigned long length);
    void write_octet_array( in OctetSeq seq, in unsigned long offset, in unsigned long length);
    void write_short_array( in ShortSeq seq, in unsigned long offset, in unsigned long length);
    void write_ushort_array( in UShortSeq seq, in unsigned long offset, in unsigned long length);
    void write_long_array(in LongSeq seq, in unsigned long offset, in unsigned long length);
    void write_ulong_array(in ULongSeq seq, in unsigned long offset,in unsigned long length);
    void write_ulonglong_array(in ULongLongSeq seq,in unsigned long offset,in unsigned long length);
    void write_longlong_array(in LongLongSeq seq,in unsigned long offset, in unsigned long length);
    void write_float_array(in FloatSeq seq, in unsigned long offset, in unsigned long length);
    void write_double_array(in DoubleSeq seq,in unsigned long offset,in unsigned long length);
 //   void write_long_double_array(in LongDoubleSeq seq, in unsigned long offset, in unsigned long length);
    void write_fixed(in any fixed_value) raises (BadFixedValue);
    void write_fixed_array(in AnySeq seq,in unsigned long offset,in unsigned long length) raises (BadFixedValue);
  };

  abstract valuetype DataInputStream {
    any read_any();
    boolean read_boolean();
    char read_char();
    wchar read_wchar();
    octet read_octet();
    short read_short();
    unsigned short read_ushort();
    long read_long();
    unsigned long read_ulong();
    long long read_longlong();
    unsigned long long read_ulonglong();
    float read_float();
    double read_double();
    // long double read_longdouble();
    string read_string();
    wstring read_wstring();
    Object read_Object();
    AbstractBase read_Abstract();
    ValueBase read_Value();
    TypeCode read_TypeCode();
    void read_any_array(inout AnySeq seq, in unsigned long offset, in unsigned long length);
    void read_boolean_array(inout BooleanSeq seq, in unsigned long offset, in unsigned long length);
    void read_char_array(inout CharSeq seq, in unsigned long offset, in unsigned long length);
    void read_wchar_array(inout WCharSeq seq, in unsigned long offset, in unsigned long length);
    void read_octet_array( inout OctetSeq seq, in unsigned long offset, in unsigned long length);
    void read_short_array( inout ShortSeq seq, in unsigned long offset, in unsigned long length);
    void read_ushort_array(inout UShortSeq seq, in unsigned long offset, in unsigned long length);
    void read_long_array(inout LongSeq seq, in unsigned long offset, in unsigned long length);
    void read_ulong_array( inout ULongSeq seq, in unsigned long offset, in unsigned long length);
    void read_ulonglong_array(inout ULongLongSeq seq, in unsigned long offset, in unsigned long length);
    void read_longlong_array( inout LongLongSeq seq, in unsigned long offset, in unsigned long length);
    void read_float_array(inout FloatSeq seq, in unsigned long offset, in unsigned long length);
    void read_double_array( inout DoubleSeq seq, in unsigned long offset,in unsigned long length);
//    void read_long_double_array( inout LongDoubleSeq seq, in unsigned long offset, in unsigned long length);
    any read_fixed( in unsigned short digits, in short scale) raises (BadFixedValue);
    void read_fixed_array(inout AnySeq seq, in unsigned long offset,in unsigned long length, in unsigned short digits,in short scale) raises (BadFixedValue);
  };

  abstract valuetype CustomMarshal {
    void marshal(in DataOutputStream os);
    void unmarshal(in DataInputStream is);
  };

  ///////////////////////////////
  // CORBA 2.6: PolicyManager  //
  ///////////////////////////////

  local interface PolicyManager {
    PolicyList get_policy_overrides(in PolicyTypeSeq ts);

    void set_policy_overrides(in PolicyList policies,
                              in SetOverrideType set_add)
     raises (InvalidPolicies);
  };

  local interface PolicyCurrent : PolicyManager, Current {

  };

};


#pragma prefix "omg.org"

module PortableServer {

  local interface POA; // forward declaration

  typedef sequence<POA> POAList;

  native Servant;

  typedef CORBA::OctetSeq ObjectId;

  exception ForwardRequest {
    Object forward_reference;
  };

  // Policy interfaces

  const CORBA::PolicyType THREAD_POLICY_ID = 16;
  const CORBA::PolicyType LIFESPAN_POLICY_ID = 17;
  const CORBA::PolicyType ID_UNIQUENESS_POLICY_ID = 18;
  const CORBA::PolicyType ID_ASSIGNMENT_POLICY_ID = 19;
  const CORBA::PolicyType IMPLICIT_ACTIVATION_POLICY_ID = 20;
  const CORBA::PolicyType SERVANT_RETENTION_POLICY_ID = 21;
  const CORBA::PolicyType REQUEST_PROCESSING_POLICY_ID = 22;

  enum ThreadPolicyValue {ORB_CTRL_MODEL,SINGLE_THREAD_MODEL, MAIN_THREAD_MODEL};


  local interface ThreadPolicy : CORBA::Policy {
    readonly attribute ThreadPolicyValue value;
  };

  enum LifespanPolicyValue {TRANSIENT,PERSISTENT};

  local interface LifespanPolicy : CORBA::Policy {
    readonly attribute LifespanPolicyValue value;
  };

  enum IdUniquenessPolicyValue {UNIQUE_ID,MULTIPLE_ID};

  local interface IdUniquenessPolicy : CORBA::Policy {
    readonly attribute IdUniquenessPolicyValue value;
  };

  enum IdAssignmentPolicyValue {USER_ID,SYSTEM_ID};

  local interface IdAssignmentPolicy : CORBA::Policy {
    readonly attribute IdAssignmentPolicyValue value;
  };

  enum ImplicitActivationPolicyValue {IMPLICIT_ACTIVATION,NO_IMPLICIT_ACTIVATION};

  local interface ImplicitActivationPolicy : CORBA::Policy {
    readonly attribute ImplicitActivationPolicyValue value;
  };

  enum ServantRetentionPolicyValue {RETAIN,NON_RETAIN};

  local interface ServantRetentionPolicy : CORBA::Policy {
    readonly attribute ServantRetentionPolicyValue value;
  };

  enum RequestProcessingPolicyValue {
    USE_ACTIVE_OBJECT_MAP_ONLY,
    USE_DEFAULT_SERVANT,
    USE_SERVANT_MANAGER
  };

  local interface RequestProcessingPolicy : CORBA::Policy {
    readonly attribute RequestProcessingPolicyValue value;
  };


  // POAManager interface

  local interface POAManager {

    exception AdapterInactive{};
		
    enum State {HOLDING, ACTIVE, DISCARDING, INACTIVE};

    void activate() raises(AdapterInactive);
		
    void hold_requests(in boolean wait_for_completion) raises(AdapterInactive);

    void discard_requests(in boolean wait_for_completion) raises(AdapterInactive);

    void deactivate(in boolean etherealize_objects, in boolean wait_for_completion)
      raises(AdapterInactive);

    State get_state();
  };


  // AdapterActivator interface

  local interface AdapterActivator {

    boolean unknown_adapter(in POA parent, in string name);

  };

  // ServantManager interface

  local interface ServantManager{ };

  local interface ServantActivator : ServantManager {
 
    Servant incarnate (in ObjectId oid,in POA adapter) raises (ForwardRequest);

    void etherealize (in ObjectId oid,in POA adapter,
                      in Servant serv, in boolean cleanup_in_progress,
                      in boolean remaining_activations);
  };

  local interface ServantLocator : ServantManager {

  native Cookie;

  Servant preinvoke(in ObjectId oid,in POA adapter,
                    in CORBA::Identifier operation,  out Cookie the_cookie)
    raises (ForwardRequest);

  void postinvoke(in ObjectId oid,in POA adapter, in CORBA::Identifier operation,
                  in Cookie the_cookie, in Servant the_servant);
  };

  // POA interface

  local interface POA {

    exception AdapterAlreadyExists {};
    exception AdapterNonExistent {};
    exception InvalidPolicy {unsigned short index;};
    exception NoServant {};
    exception ObjectAlreadyActive {};
    exception ObjectNotActive {};
    exception ServantAlreadyActive {};
    exception ServantNotActive {};
    exception WrongAdapter {};
    exception WrongPolicy {};

    // POA creation and destruction

    POA create_POA(in string adapter_name, in POAManager a_POAManager,
                   in CORBA::PolicyList policies)
        raises (AdapterAlreadyExists, InvalidPolicy);

    POA find_POA(in string adapter_name, in boolean activate_it) raises (AdapterNonExistent);

    void destroy(in boolean etherealize_objects,in boolean wait_for_completion);

    // Factories for Policy objects

    ThreadPolicy create_thread_policy(in ThreadPolicyValue value);

    LifespanPolicy create_lifespan_policy(in LifespanPolicyValue value);

    IdUniquenessPolicy create_id_uniqueness_policy(in IdUniquenessPolicyValue value);

    IdAssignmentPolicy create_id_assignment_policy(in IdAssignmentPolicyValue value);

    ImplicitActivationPolicy create_implicit_activation_policy(in ImplicitActivationPolicyValue value);

    ServantRetentionPolicy create_servant_retention_policy(in ServantRetentionPolicyValue value);

    RequestProcessingPolicy create_request_processing_policy(in RequestProcessingPolicyValue value);

    // POA attributes

    readonly attribute string the_name;
    readonly attribute POA the_parent;
    readonly attribute POAList the_children;
    readonly attribute POAManager the_POAManager;
    attribute AdapterActivator the_activator;

    // Servant Manager registration:
    ServantManager get_servant_manager() raises (WrongPolicy);

    void set_servant_manager(in ServantManager imgr) raises (WrongPolicy);

    // operations for the USE_DEFAULT_SERVANT policy
    Servant get_servant() raises (NoServant, WrongPolicy);

    void set_servant(in Servant p_servant) raises (WrongPolicy);
    
    // object activation and deactivation
    ObjectId activate_object(in Servant p_servant)
      raises (ServantAlreadyActive, WrongPolicy);

    void activate_object_with_id(in ObjectId id, in Servant p_servant) 
      raises (ServantAlreadyActive, ObjectAlreadyActive, WrongPolicy);

    void deactivate_object(in ObjectId oid) raises (ObjectNotActive, WrongPolicy);

    // reference creation operations
    Object create_reference (in CORBA::RepositoryId intf) raises (WrongPolicy);

    Object create_reference_with_id (in ObjectId oid,
                                     in CORBA::RepositoryId intf);

    // Identity mapping operations:

    ObjectId servant_to_id(in Servant p_servant) raises (ServantNotActive, WrongPolicy);

    Object servant_to_reference(in Servant p_servant) raises (ServantNotActive, WrongPolicy);

    Servant reference_to_servant(in Object reference) raises(ObjectNotActive, WrongAdapter, WrongPolicy);

    ObjectId reference_to_id(in Object reference) raises (WrongAdapter, WrongPolicy);

    Servant id_to_servant(in ObjectId oid) raises (ObjectNotActive, WrongPolicy);

    Object id_to_reference(in ObjectId oid) raises (ObjectNotActive, WrongPolicy);

    readonly attribute CORBA::OctetSeq id;
  };

  // Current interface

  local interface Current : CORBA::Current {

    exception NoContext { };

    POA get_POA() raises (NoContext);

    ObjectId get_object_id() raises (NoContext);

    Object get_reference() raises(NoContext);

    Servant get_servant() raises (NoContext);

  };

};

