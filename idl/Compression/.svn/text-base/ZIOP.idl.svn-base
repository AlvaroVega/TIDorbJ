// -*- IDL -*-

#ifndef _ZIOP_
#define _ZIOP_

#include <orb.idl>
#include "Compression.idl"
#include "IOP.idl"

#pragma prefix "omg.org"

module ZIOP
{

  //  
  // Some attachments for GIOP messages, defined in OMG IDL:
  // 

  /**
   * GIOP Message of a ZIOP message
   */
  
  struct CompressedData { 

    /**
     * CompressorId used to compress data
     * Must be unique, not a list
     */

    Compression::CompressorId compressorid; 

    /**
     * Lenght of RequestBody or ReplyBody fields. Usefully for:
     * - To checksum
     * - To alloc memory at decompress time (in some algorithms)
     */

    unsigned long original_length; 

    /**
     * RequestBody or ReplyBody compressed
     */

    //CORBA::OctetSeq data;
    Compression::Buffer data;

  }; 


  //
  // CORBA Policies for ZIOP
  //
  
  typedef boolean CompressionEnablingPolicyValue;
  
  /**
   * Tag Id for CompressionEnablingPolicy
   */
  const CORBA::PolicyType COMPRESSION_ENABLING_POLICY_ID = 64;

  /**
   * The ZIOP CompressionEnablingPolicy. Has an boolean attribute indicating
   * if compression is enabled or not.
   */
  local interface CompressionEnablingPolicy : CORBA::Policy
  {
    readonly attribute CompressionEnablingPolicyValue compression_enabled;
  };

  /**
   * Tag Id for CompressorIdPolicy
   */
  const CORBA::PolicyType COMPRESSOR_ID_LEVEL_LIST_POLICY_ID = 65;

  /**
   * The ZIOP CompressorIdPolicy. Has an CompressorId attribute indicating
   * the compression algorithms that can be used.
   */
  local interface CompressorIdLevelListPolicy : CORBA::Policy
  {
    readonly attribute Compression::CompressorIdLevelList compressor_ids;
  };


  typedef unsigned long CompressionLowValuePolicyValue;

  /**
   * Tag Id for CompressorIdPolicy
   */
  const CORBA::PolicyType COMPRESSION_LOW_VALUE_POLICY_ID = 66;

  /**
   * The ZIOP LowValuePolicy. Has an low_value attribute indicating the
   * minimun size of application data that has tp be send with in a ZIOP Message.
   */
  local interface CompressionLowValuePolicy : CORBA::Policy
  {
    readonly attribute CompressionLowValuePolicyValue low_value;
  };


  typedef float CompressionMinRatioPolicyValue;

  /**
   * Tag Id for CompressorIdPolicy
   */
  const CORBA::PolicyType COMPRESSION_MIN_RATIO_POLICY_ID = 67;

  /**
   * The ZIOP CompressionMinRatioPolicy. 
   * 
   */
  local interface CompressionMinRatioPolicy : CORBA::Policy
  {
    readonly attribute CompressionMinRatioPolicyValue ratio;
  };
  



};

#endif
