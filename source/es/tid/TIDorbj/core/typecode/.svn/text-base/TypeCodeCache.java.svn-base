/*
* MORFEO Project
* http://www.morfeo-project.org
*
* Component: TIDorbJ
* Programming Language: Java
*
* File: $Source$
* Version: $Revision$
* Date: $Date$
* Last modified by: $Author$
*
* (C) Copyright 2004 Telefónica Investigación y Desarrollo
*     S.A.Unipersonal (Telefónica I+D)
*
* Info about members and contributors of the MORFEO project
* is available at:
*
*   http://www.morfeo-project.org/TIDorbJ/CREDITS
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*
* If you want to use this software an plan to distribute a
* proprietary application in any way, and you are not licensing and
* distributing your source code under GPL, you probably need to
* purchase a commercial license of the product.  More info about
* licensing options is available at:
*
*   http://www.morfeo-project.org/TIDorbJ/Licensing
*/    
package es.tid.TIDorbj.core.typecode;

import org.omg.CORBA.INTERNAL;
import org.omg.CORBA.TypeCode;
import org.omg.CORBA.TypeCodePackage.BadKind;

import es.tid.TIDorbj.core.util.FullUseTableException;
import es.tid.TIDorbj.core.util.UseTable;

public class TypeCodeCache
{

    protected UseTable m_table;

    public TypeCodeCache(int max)
    {
        m_table = new UseTable(max);
    }

    public synchronized TypeCode find(String rep_id)
    {
        if (m_table.object_exist(rep_id)) {
            TypeCodeHandler handler = (TypeCodeHandler) m_table.get(rep_id);

            m_table.use(rep_id);
            return handler.getTypeCode();
        }

        return null;
    }

    /**
     * Tries to insert one TypeCode in the TypeCodeCache.
     * 
     * @param type
     * @return if there is also a TypeCode with the same id, returns the
     *         TypeCode cached otherwise, the same Typecode put. *
     */
    public synchronized TypeCode put(TypeCode type)
    {
        String rep_id = null;
        try {
            rep_id = type.id();
        }
        catch (BadKind badKind) {
            throw new 
                INTERNAL("Only Complex Typecodes can be put in the cache");
        }

        if (rep_id == null)
            throw new org.omg.CORBA.INTERNAL("Cannot get RepositoryId");

        if (m_table.object_exist(rep_id)) {
            m_table.use(rep_id);
            return ((TypeCodeHandler) m_table.get(rep_id)).getTypeCode();
        } else {
            try {
                m_table.append(rep_id, new TypeCodeHandler(type));
                return type;
            }
            catch (FullUseTableException e) {
                //ignore it
            }
        }

        return type;

    }

    public synchronized void destroy()
    {
        m_table = null;
    }
}